(function (a) {
	if (typeof define === 'function' && define.amd) {
		define('jstree.category', ['jquery', 'jstree'], a);
	} else {
		if (typeof exports === 'object') {
			a(require('jquery'), require('jstree'));
		} else {
			a(jQuery, jQuery.jstree);
		}
	}
})(function (h, k, d) {
	var b = 0,
		c = false,
		j = false,
		i = false,
		l = [],
		a = h('script:last').attr('src'),
		m = window.document,
		n = m.createElement('LI'),
		f,
		e;
	var g = m.createElement('I');
	g.className = 'jstree-icon jstree-checkbox';
	g.setAttribute('role', 'presentation');
	h.jstree.plugins.checkbox = function (o, p) {
		this.bind = function () {
			p.bind.call(this);
			this._data.checkbox.uto = false;
			this._data.checkbox.selected = [];
			if (this.settings.checkbox.three_state) {
				this.settings.checkbox.cascade = 'up+down+undetermined';
			}
			this.element
				.on(
					'init.jstree',
					h.proxy(function () {
						this._data.checkbox.visible = this.settings.checkbox.visible;
						if (!this.settings.checkbox.keep_selected_style) {
							this.element.addClass('jstree-checkbox-no-clicked');
						}
						if (this.settings.checkbox.tie_selection) {
							this.element.addClass('jstree-checkbox-selection');
						}
					}, this)
				)
				.on(
					'loading.jstree',
					h.proxy(function () {
						this[this._data.checkbox.visible ? 'show_checkboxes' : 'hide_checkboxes']();
					}, this)
				);
			if (this.settings.checkbox.cascade.indexOf('undetermined') !== -1) {
				this.element.on(
					'changed.jstree uncheck_node.jstree check_node.jstree uncheck_all.jstree check_all.jstree move_node.jstree copy_node.jstree redraw.jstree open_node.jstree',
					h.proxy(function () {
						if (this._data.checkbox.uto) {
							clearTimeout(this._data.checkbox.uto);
						}
						this._data.checkbox.uto = setTimeout(h.proxy(this._undetermined, this), 50);
					}, this)
				);
			}
			if (!this.settings.checkbox.tie_selection) {
				this.element.on(
					'model.jstree',
					h.proxy(function (v, t) {
						var q = this._model.data,
							u = q[t.parent],
							w = t.nodes,
							s,
							r;
						for (s = 0, r = w.length; s < r; s++) {
							q[w[s]].state.checked =
								q[w[s]].state.checked ||
								(q[w[s]].original && q[w[s]].original.state && q[w[s]].original.state.checked);
							if (q[w[s]].state.checked) {
								this._data.checkbox.selected.push(w[s]);
							}
						}
					}, this)
				);
			}
			if (
				this.settings.checkbox.cascade.indexOf('up') !== -1 ||
				this.settings.checkbox.cascade.indexOf('down') !== -1
			) {
				this.element
					.on(
						'model.jstree',
						h.proxy(function (B, y) {
							var r = this._model.data,
								q = r[y.parent],
								A = y.nodes,
								F = [],
								C,
								z,
								w,
								v,
								u,
								x,
								E = this.settings.checkbox.cascade,
								D = this.settings.checkbox.tie_selection;
							if (E.indexOf('down') !== -1) {
								if (q.state[D ? 'selected' : 'checked']) {
									for (z = 0, w = A.length; z < w; z++) {
										r[A[z]].state[D ? 'selected' : 'checked'] = true;
									}
									this._data[D ? 'core' : 'checkbox'].selected = this._data[
										D ? 'core' : 'checkbox'
									].selected.concat(A);
								} else {
									for (z = 0, w = A.length; z < w; z++) {
										if (r[A[z]].state[D ? 'selected' : 'checked']) {
											for (v = 0, u = r[A[z]].children_d.length; v < u; v++) {
												r[r[A[z]].children_d[v]].state[D ? 'selected' : 'checked'] = true;
											}
											this._data[D ? 'core' : 'checkbox'].selected = this._data[
												D ? 'core' : 'checkbox'
											].selected.concat(r[A[z]].children_d);
										}
									}
								}
							}
							if (E.indexOf('up') !== -1) {
								for (z = 0, w = q.children_d.length; z < w; z++) {
									if (!r[q.children_d[z]].children.length) {
										F.push(r[q.children_d[z]].parent);
									}
								}
								F = h.vakata.array_unique(F);
								for (v = 0, u = F.length; v < u; v++) {
									q = r[F[v]];
									while (q && q.id !== h.jstree.root) {
										C = 0;
										for (z = 0, w = q.children.length; z < w; z++) {
											C += r[q.children[z]].state[D ? 'selected' : 'checked'];
										}
										if (C === w) {
											q.state[D ? 'selected' : 'checked'] = true;
											this._data[D ? 'core' : 'checkbox'].selected.push(q.id);
											x = this.get_node(q, true);
											if (x && x.length) {
												x.attr('aria-selected', true)
													.children('.jstree-anchor')
													.addClass(D ? 'jstree-clicked' : 'jstree-checked');
											}
										} else {
											break;
										}
										q = this.get_node(q.parent);
									}
								}
							}
							this._data[D ? 'core' : 'checkbox'].selected = h.vakata.array_unique(
								this._data[D ? 'core' : 'checkbox'].selected
							);
						}, this)
					)
					.on(
						this.settings.checkbox.tie_selection ? 'select_node.jstree' : 'check_node.jstree',
						h.proxy(function (z, x) {
							var w = x.node,
								q = this._model.data,
								A = this.get_node(w.parent),
								r = this.get_node(w, true),
								y,
								u,
								B,
								v,
								D = this.settings.checkbox.cascade,
								C = this.settings.checkbox.tie_selection;
							if (D.indexOf('down') !== -1) {
								this._data[C ? 'core' : 'checkbox'].selected = h.vakata.array_unique(
									this._data[C ? 'core' : 'checkbox'].selected.concat(w.children_d)
								);
								for (y = 0, u = w.children_d.length; y < u; y++) {
									v = q[w.children_d[y]];
									v.state[C ? 'selected' : 'checked'] = true;
									if (v && v.original && v.original.state && v.original.state.undetermined) {
										v.original.state.undetermined = false;
									}
								}
							}
							if (D.indexOf('up') !== -1) {
								while (A && A.id !== h.jstree.root) {
									B = 0;
									for (y = 0, u = A.children.length; y < u; y++) {
										B += q[A.children[y]].state[C ? 'selected' : 'checked'];
									}
									if (B === u) {
										A.state[C ? 'selected' : 'checked'] = true;
										this._data[C ? 'core' : 'checkbox'].selected.push(A.id);
										v = this.get_node(A, true);
										if (v && v.length) {
											v.attr('aria-selected', true)
												.children('.jstree-anchor')
												.addClass(C ? 'jstree-clicked' : 'jstree-checked');
										}
									} else {
										break;
									}
									A = this.get_node(A.parent);
								}
							}
							if (D.indexOf('down') !== -1 && r.length) {
								r.find('.jstree-anchor')
									.addClass(C ? 'jstree-clicked' : 'jstree-checked')
									.parent()
									.attr('aria-selected', true);
							}
						}, this)
					)
					.on(
						this.settings.checkbox.tie_selection ? 'deselect_all.jstree' : 'uncheck_all.jstree',
						h.proxy(function (w, u) {
							var v = this.get_node(h.jstree.root),
								q = this._model.data,
								t,
								r,
								s;
							for (t = 0, r = v.children_d.length; t < r; t++) {
								s = q[v.children_d[t]];
								if (s && s.original && s.original.state && s.original.state.undetermined) {
									s.original.state.undetermined = false;
								}
							}
						}, this)
					)
					.on(
						this.settings.checkbox.tie_selection ? 'deselect_node.jstree' : 'uncheck_node.jstree',
						h.proxy(function (y, v) {
							var u = v.node,
								q = this.get_node(u, true),
								w,
								r,
								x,
								A = this.settings.checkbox.cascade,
								z = this.settings.checkbox.tie_selection;
							if (u && u.original && u.original.state && u.original.state.undetermined) {
								u.original.state.undetermined = false;
							}
							if (A.indexOf('down') !== -1) {
								for (w = 0, r = u.children_d.length; w < r; w++) {
									x = this._model.data[u.children_d[w]];
									x.state[z ? 'selected' : 'checked'] = false;
									if (x && x.original && x.original.state && x.original.state.undetermined) {
										x.original.state.undetermined = false;
									}
								}
							}
							if (A.indexOf('up') !== -1) {
								for (w = 0, r = u.parents.length; w < r; w++) {
									x = this._model.data[u.parents[w]];
									x.state[z ? 'selected' : 'checked'] = false;
									if (x && x.original && x.original.state && x.original.state.undetermined) {
										x.original.state.undetermined = false;
									}
									x = this.get_node(u.parents[w], true);
									if (x && x.length) {
										x.attr('aria-selected', false)
											.children('.jstree-anchor')
											.removeClass(z ? 'jstree-clicked' : 'jstree-checked');
									}
								}
							}
							x = [];
							for (w = 0, r = this._data[z ? 'core' : 'checkbox'].selected.length; w < r; w++) {
								if (
									(A.indexOf('down') === -1 ||
										h.inArray(this._data[z ? 'core' : 'checkbox'].selected[w], u.children_d) ===
											-1) &&
									(A.indexOf('up') === -1 ||
										h.inArray(this._data[z ? 'core' : 'checkbox'].selected[w], u.parents) === -1)
								) {
									x.push(this._data[z ? 'core' : 'checkbox'].selected[w]);
								}
							}
							this._data[z ? 'core' : 'checkbox'].selected = h.vakata.array_unique(x);
							if (A.indexOf('down') !== -1 && q.length) {
								q.find('.jstree-anchor')
									.removeClass(z ? 'jstree-clicked' : 'jstree-checked')
									.parent()
									.attr('aria-selected', false);
							}
						}, this)
					);
			}
			if (this.settings.checkbox.cascade.indexOf('up') !== -1) {
				this.element
					.on(
						'delete_node.jstree',
						h.proxy(function (x, u) {
							var q = this.get_node(u.parent),
								r = this._model.data,
								v,
								s,
								y,
								w,
								z = this.settings.checkbox.tie_selection;
							while (q && q.id !== h.jstree.root && !q.state[z ? 'selected' : 'checked']) {
								y = 0;
								for (v = 0, s = q.children.length; v < s; v++) {
									y += r[q.children[v]].state[z ? 'selected' : 'checked'];
								}
								if (s > 0 && y === s) {
									q.state[z ? 'selected' : 'checked'] = true;
									this._data[z ? 'core' : 'checkbox'].selected.push(q.id);
									w = this.get_node(q, true);
									if (w && w.length) {
										w.attr('aria-selected', true)
											.children('.jstree-anchor')
											.addClass(z ? 'jstree-clicked' : 'jstree-checked');
									}
								} else {
									break;
								}
								q = this.get_node(q.parent);
							}
						}, this)
					)
					.on(
						'move_node.jstree',
						h.proxy(function (A, y) {
							var u = y.is_multi,
								z = y.old_parent,
								q = this.get_node(y.parent),
								s = this._model.data,
								r,
								B,
								x,
								v,
								w,
								C = this.settings.checkbox.tie_selection;
							if (!u) {
								r = this.get_node(z);
								while (r && r.id !== h.jstree.root && !r.state[C ? 'selected' : 'checked']) {
									B = 0;
									for (x = 0, v = r.children.length; x < v; x++) {
										B += s[r.children[x]].state[C ? 'selected' : 'checked'];
									}
									if (v > 0 && B === v) {
										r.state[C ? 'selected' : 'checked'] = true;
										this._data[C ? 'core' : 'checkbox'].selected.push(r.id);
										w = this.get_node(r, true);
										if (w && w.length) {
											w.attr('aria-selected', true)
												.children('.jstree-anchor')
												.addClass(C ? 'jstree-clicked' : 'jstree-checked');
										}
									} else {
										break;
									}
									r = this.get_node(r.parent);
								}
							}
							r = q;
							while (r && r.id !== h.jstree.root) {
								B = 0;
								for (x = 0, v = r.children.length; x < v; x++) {
									B += s[r.children[x]].state[C ? 'selected' : 'checked'];
								}
								if (B === v) {
									if (!r.state[C ? 'selected' : 'checked']) {
										r.state[C ? 'selected' : 'checked'] = true;
										this._data[C ? 'core' : 'checkbox'].selected.push(r.id);
										w = this.get_node(r, true);
										if (w && w.length) {
											w.attr('aria-selected', true)
												.children('.jstree-anchor')
												.addClass(C ? 'jstree-clicked' : 'jstree-checked');
										}
									}
								} else {
									if (r.state[C ? 'selected' : 'checked']) {
										r.state[C ? 'selected' : 'checked'] = false;
										this._data[C ? 'core' : 'checkbox'].selected = h.vakata.array_remove_item(
											this._data[C ? 'core' : 'checkbox'].selected,
											r.id
										);
										w = this.get_node(r, true);
										if (w && w.length) {
											w.attr('aria-selected', false)
												.children('.jstree-anchor')
												.removeClass(C ? 'jstree-clicked' : 'jstree-checked');
										}
									} else {
										break;
									}
								}
								r = this.get_node(r.parent);
							}
						}, this)
					);
			}
		};
		this._undetermined = function () {
			if (this.element === null) {
				return;
			}
			var y,
				x,
				w,
				v,
				r = {},
				u = this._model.data,
				A = this.settings.checkbox.tie_selection,
				B = this._data[A ? 'core' : 'checkbox'].selected,
				q = [],
				z = this;
			for (y = 0, x = B.length; y < x; y++) {
				if (u[B[y]] && u[B[y]].parents) {
					for (w = 0, v = u[B[y]].parents.length; w < v; w++) {
						if (r[u[B[y]].parents[w]] === d && u[B[y]].parents[w] !== h.jstree.root) {
							r[u[B[y]].parents[w]] = true;
							q.push(u[B[y]].parents[w]);
						}
					}
				}
			}
			this.element
				.find('.jstree-closed')
				.not(':has(.jstree-children)')
				.each(function () {
					var s = z.get_node(this),
						t;
					if (!s.state.loaded) {
						if (
							s.original &&
							s.original.state &&
							s.original.state.undetermined &&
							s.original.state.undetermined === true
						) {
							if (r[s.id] === d && s.id !== h.jstree.root) {
								r[s.id] = true;
								q.push(s.id);
							}
							for (w = 0, v = s.parents.length; w < v; w++) {
								if (r[s.parents[w]] === d && s.parents[w] !== h.jstree.root) {
									r[s.parents[w]] = true;
									q.push(s.parents[w]);
								}
							}
						}
					} else {
						for (y = 0, x = s.children_d.length; y < x; y++) {
							t = u[s.children_d[y]];
							if (
								!t.state.loaded &&
								t.original &&
								t.original.state &&
								t.original.state.undetermined &&
								t.original.state.undetermined === true
							) {
								if (r[t.id] === d && t.id !== h.jstree.root) {
									r[t.id] = true;
									q.push(t.id);
								}
								for (w = 0, v = t.parents.length; w < v; w++) {
									if (r[t.parents[w]] === d && t.parents[w] !== h.jstree.root) {
										r[t.parents[w]] = true;
										q.push(t.parents[w]);
									}
								}
							}
						}
					}
				});
			this.element.find('.jstree-undetermined').removeClass('jstree-undetermined');
			for (y = 0, x = q.length; y < x; y++) {
				if (!u[q[y]].state[A ? 'selected' : 'checked']) {
					B = this.get_node(q[y], true);
					if (B && B.length) {
						B.children('.jstree-anchor')
							.children('.jstree-checkbox')
							.addClass('jstree-undetermined');
					}
				}
			}
		};
		this.redraw_node = function (x, q, u, w) {
			x = p.redraw_node.apply(this, arguments);
			if (this.get_node(x).original.type == 'category') {
				return x;
			}
			if (x) {
				var t,
					r,
					s = null,
					v = null;
				for (t = 0, r = x.childNodes.length; t < r; t++) {
					if (
						x.childNodes[t] &&
						x.childNodes[t].className &&
						x.childNodes[t].className.indexOf('jstree-anchor') !== -1
					) {
						s = x.childNodes[t];
						break;
					}
				}
				if (s) {
					if (!this.settings.checkbox.tie_selection && this._model.data[x.id].state.checked) {
						s.className += ' jstree-checked';
					}
					v = g.cloneNode(false);
					if (this._model.data[x.id].state.checkbox_disabled) {
						v.className += ' jstree-checkbox-disabled';
					}
					s.insertBefore(v, s.childNodes[0]);
				}
			}
			if (!u && this.settings.checkbox.cascade.indexOf('undetermined') !== -1) {
				if (this._data.checkbox.uto) {
					clearTimeout(this._data.checkbox.uto);
				}
				this._data.checkbox.uto = setTimeout(h.proxy(this._undetermined, this), 50);
			}
			return x;
		};
		this.show_checkboxes = function () {
			this._data.core.themes.checkboxes = true;
			this.get_container_ul().removeClass('jstree-no-checkboxes');
		};
		this.hide_checkboxes = function () {
			this._data.core.themes.checkboxes = false;
			this.get_container_ul().addClass('jstree-no-checkboxes');
		};
		this.toggle_checkboxes = function () {
			if (this._data.core.themes.checkboxes) {
				this.hide_checkboxes();
			} else {
				this.show_checkboxes();
			}
		};
		this.is_undetermined = function (x) {
			x = this.get_node(x);
			var w = this.settings.checkbox.cascade,
				v,
				r,
				u = this.settings.checkbox.tie_selection,
				y = this._data[u ? 'core' : 'checkbox'].selected,
				q = this._model.data;
			if (
				!x ||
				x.state[u ? 'selected' : 'checked'] === true ||
				w.indexOf('undetermined') === -1 ||
				(w.indexOf('down') === -1 && w.indexOf('up') === -1)
			) {
				return false;
			}
			if (!x.state.loaded && x.original.state.undetermined === true) {
				return true;
			}
			for (v = 0, r = x.children_d.length; v < r; v++) {
				if (
					h.inArray(x.children_d[v], y) !== -1 ||
					(!q[x.children_d[v]].state.loaded && q[x.children_d[v]].original.state.undetermined)
				) {
					return true;
				}
			}
			return false;
		};
		this.disable_checkbox = function (s) {
			var r, q, t;
			if (h.isArray(s)) {
				s = s.slice();
				for (r = 0, q = s.length; r < q; r++) {
					this.disable_checkbox(s[r]);
				}
				return true;
			}
			s = this.get_node(s);
			if (!s || s.id === h.jstree.root) {
				return false;
			}
			t = this.get_node(s, true);
			if (!s.state.checkbox_disabled) {
				s.state.checkbox_disabled = true;
				if (t && t.length) {
					t.children('.jstree-anchor')
						.children('.jstree-checkbox')
						.addClass('jstree-checkbox-disabled');
				}
				this.trigger('disable_checkbox', { node: s });
			}
		};
		this.enable_checkbox = function (s) {
			var r, q, t;
			if (h.isArray(s)) {
				s = s.slice();
				for (r = 0, q = s.length; r < q; r++) {
					this.enable_checkbox(s[r]);
				}
				return true;
			}
			s = this.get_node(s);
			if (!s || s.id === h.jstree.root) {
				return false;
			}
			t = this.get_node(s, true);
			if (s.state.checkbox_disabled) {
				s.state.checkbox_disabled = false;
				if (t && t.length) {
					t.children('.jstree-anchor')
						.children('.jstree-checkbox')
						.removeClass('jstree-checkbox-disabled');
				}
				this.trigger('enable_checkbox', { node: s });
			}
		};
		this.activate_node = function (r, q) {
			if (h(q.target).hasClass('jstree-checkbox-disabled')) {
				return false;
			}
			if (this.get_node(r).original.type == 'category') {
				this.trigger('activate_node', { node: this.get_node(r) });
			}
			if (
				this.settings.checkbox.tie_selection &&
				(this.settings.checkbox.whole_node || h(q.target).hasClass('jstree-checkbox'))
			) {
				q.ctrlKey = true;
			}
			if (
				this.settings.checkbox.tie_selection ||
				(!this.settings.checkbox.whole_node && !h(q.target).hasClass('jstree-checkbox'))
			) {
				return p.activate_node.call(this, r, q);
			}
			if (this.is_disabled(r)) {
				return false;
			}
			if (this.is_checked(r)) {
				this.uncheck_node(r, q);
			} else {
				this.check_node(r, q);
			}
			this.trigger('activate_node', { node: this.get_node(r) });
		};
		this.check_node = function (u, t) {
			if (this.settings.checkbox.tie_selection) {
				return this.select_node(u, false, true, t);
			}
			var v, s, q, r;
			if (h.isArray(u)) {
				u = u.slice();
				for (s = 0, q = u.length; s < q; s++) {
					this.check_node(u[s], t);
				}
				return true;
			}
			u = this.get_node(u);
			if (!u || u.id === h.jstree.root) {
				return false;
			}
			v = this.get_node(u, true);
			if (!u.state.checked) {
				u.state.checked = true;
				this._data.checkbox.selected.push(u.id);
				if (v && v.length) {
					v.children('.jstree-anchor').addClass('jstree-checked');
				}
				this.trigger('check_node', { node: u, selected: this._data.checkbox.selected, event: t });
			}
		};
		this.uncheck_node = function (t, s) {
			if (this.settings.checkbox.tie_selection) {
				return this.deselect_node(t, false, s);
			}
			var r, q, u;
			if (h.isArray(t)) {
				t = t.slice();
				for (r = 0, q = t.length; r < q; r++) {
					this.uncheck_node(t[r], s);
				}
				return true;
			}
			t = this.get_node(t);
			if (!t || t.id === h.jstree.root) {
				return false;
			}
			u = this.get_node(t, true);
			if (t.state.checked) {
				t.state.checked = false;
				this._data.checkbox.selected = h.vakata.array_remove_item(
					this._data.checkbox.selected,
					t.id
				);
				if (u.length) {
					u.children('.jstree-anchor').removeClass('jstree-checked');
				}
				this.trigger('uncheck_node', { node: t, selected: this._data.checkbox.selected, event: s });
			}
		};
		this.check_all = function () {
			if (this.settings.checkbox.tie_selection) {
				return this.select_all();
			}
			var s = this._data.checkbox.selected.concat([]),
				r,
				q;
			this._data.checkbox.selected = this._model.data[h.jstree.root].children_d.concat();
			for (r = 0, q = this._data.checkbox.selected.length; r < q; r++) {
				if (this._model.data[this._data.checkbox.selected[r]]) {
					this._model.data[this._data.checkbox.selected[r]].state.checked = true;
				}
			}
			this.redraw(true);
			this.trigger('check_all', { selected: this._data.checkbox.selected });
		};
		this.uncheck_all = function () {
			if (this.settings.checkbox.tie_selection) {
				return this.deselect_all();
			}
			var s = this._data.checkbox.selected.concat([]),
				r,
				q;
			for (r = 0, q = this._data.checkbox.selected.length; r < q; r++) {
				if (this._model.data[this._data.checkbox.selected[r]]) {
					this._model.data[this._data.checkbox.selected[r]].state.checked = false;
				}
			}
			this._data.checkbox.selected = [];
			this.element.find('.jstree-checked').removeClass('jstree-checked');
			this.trigger('uncheck_all', { selected: this._data.checkbox.selected, node: s });
		};
		this.is_checked = function (q) {
			if (this.settings.checkbox.tie_selection) {
				return this.is_selected(q);
			}
			q = this.get_node(q);
			if (!q || q.id === h.jstree.root) {
				return false;
			}
			return q.state.checked;
		};
		this.get_checked = function (q) {
			if (this.settings.checkbox.tie_selection) {
				return this.get_selected(q);
			}
			return q
				? h.map(
						this._data.checkbox.selected,
						h.proxy(function (r) {
							return this.get_node(r);
						}, this)
				  )
				: this._data.checkbox.selected;
		};
		this.get_top_checked = function (v) {
			if (this.settings.checkbox.tie_selection) {
				return this.get_top_selected(v);
			}
			var u = this.get_checked(true),
				w = {},
				t,
				s,
				r,
				q;
			for (t = 0, s = u.length; t < s; t++) {
				w[u[t].id] = u[t];
			}
			for (t = 0, s = u.length; t < s; t++) {
				for (r = 0, q = u[t].children_d.length; r < q; r++) {
					if (w[u[t].children_d[r]]) {
						delete w[u[t].children_d[r]];
					}
				}
			}
			u = [];
			for (t in w) {
				if (w.hasOwnProperty(t)) {
					u.push(t);
				}
			}
			return v
				? h.map(
						u,
						h.proxy(function (x) {
							return this.get_node(x);
						}, this)
				  )
				: u;
		};
		this.get_bottom_checked = function (t) {
			if (this.settings.checkbox.tie_selection) {
				return this.get_bottom_selected(t);
			}
			var s = this.get_checked(true),
				u = [],
				r,
				q;
			for (r = 0, q = s.length; r < q; r++) {
				if (!s[r].children.length) {
					u.push(s[r].id);
				}
			}
			return t
				? h.map(
						u,
						h.proxy(function (v) {
							return this.get_node(v);
						}, this)
				  )
				: u;
		};
		this.load_node = function (v, x) {
			var r, q, u, s, w, t;
			if (!h.isArray(v) && !this.settings.checkbox.tie_selection) {
				t = this.get_node(v);
				if (t && t.state.loaded) {
					for (r = 0, q = t.children_d.length; r < q; r++) {
						if (this._model.data[t.children_d[r]].state.checked) {
							w = true;
							this._data.checkbox.selected = h.vakata.array_remove_item(
								this._data.checkbox.selected,
								t.children_d[r]
							);
						}
					}
				}
			}
			return p.load_node.apply(this, arguments);
		};
		this.get_state = function () {
			var q = p.get_state.apply(this, arguments);
			if (this.settings.checkbox.tie_selection) {
				return q;
			}
			q.checkbox = this._data.checkbox.selected.slice();
			return q;
		};
		this.set_state = function (r, t) {
			var q = p.set_state.apply(this, arguments);
			if (q && r.checkbox) {
				if (!this.settings.checkbox.tie_selection) {
					this.uncheck_all();
					var s = this;
					h.each(r.checkbox, function (w, u) {
						s.check_node(u);
					});
				}
				delete r.checkbox;
				this.set_state(r, t);
				return false;
			}
			return q;
		};
		this.refresh = function (r, q) {
			if (!this.settings.checkbox.tie_selection) {
				this._data.checkbox.selected = [];
			}
			return p.refresh.apply(this, arguments);
		};
	};
});
