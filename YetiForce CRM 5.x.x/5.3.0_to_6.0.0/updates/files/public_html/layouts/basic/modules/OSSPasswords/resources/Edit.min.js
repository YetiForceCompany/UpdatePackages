'use strict';

Vtiger_Edit_Js('OSSPasswords_Edit_Js',{},{/**
		 * Function to register recordpresave event
		 */registerRecordPreSaveEvent:function registerRecordPreSaveEvent(form){var thisInstance=this;'undefined'==typeof form&&(form=this.getForm()),form.on(Vtiger_Edit_Js.recordPreSave,function(e){var password=form.find('[name="password"]').val(),id=form.find('[name="record"]').val(),params={};'**********'===password&&(params={},params.data={module:'OSSPasswords',action:'GetPass',record:id},params.async=!1,AppConnector.request(params).done(function(data){var response=data.result;if(response.success){var el=document.getElementById('OSSPasswords_editView_fieldName_password');el.value=response.password,el.onchange();}}),PasswordHelper.passwordStrength('','')),password=form.find('[name="password"]').val(),params={},params.data={module:'OSSPasswords',action:'CheckPass',password:password,id:id},params.async=!1,params.dataType='json',AppConnector.request(params).done(function(data){if(!1===data.result.success){var params={text:data.result.message,sticker:!1,sticker_hover:!1,type:'error'};app.showNotify(params),thisInstance.sending=!1,e.preventDefault(),e.stopPropagation();}else !0!==data.result.success||void 0!==thisInstance.sending&&thisInstance.sending?thisInstance.sending&&(e.preventDefault(),e.stopPropagation()):thisInstance.sending=!0;});});},generatePassword:function generatePassword(e){var element=jQuery(e.currentTarget),form=element.closest('form'),min=parseInt(jQuery('#minChars').val()),max=parseInt(jQuery('#maxChars').val()),allowedChars=jQuery('#allowedLetters').val(),password='';// variable holding new password
// array of allowed characters that will consist of password
// if there there is something wrong build the password from only exclamation marks
'undefined'==typeof allowedChars&&(allowedChars='!');var chArray=allowedChars.split(',');// min length of a password
'undefined'==typeof min&&(min=10),'undefined'==typeof max&&(max=15);// default 15
// get the password length
var passlength=parseInt(Math.random()*(max-min)+min),i=0;// index for the loop
// loop to get random string with *pass_length* characters
for(i=0;i<=passlength;i++){var charIndex=parseInt(Math.random()*chArray.length);password+=chArray[charIndex];}// get desired text field
var passForm=form.find('[name ="password"]');// change its value to the generated password
passForm.val(password),passForm.trigger('change');},registerButtonsEvents:function registerButtonsEvents(){var thisInstance=this;$('.js-generatePass').on('click',function(e){thisInstance.generatePassword(e);});},registerBasicEvents:function registerBasicEvents(container){this._super(container),this.registerButtonsEvents(),this.registerRecordPreSaveEvent(container);}});
//# sourceMappingURL=Edit.min.js.map
